version: "3.8"

services:
  database:
    image: mysql:8.0
    platform: linux/arm64
    container_name: database
    restart: unless-stopped
    mem_limit: "1g"
    cpus: "1.5"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: honeymorning
      MYSQL_USER: honeymorning
      MYSQL_PASSWORD: honeymorning
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./configuration/local/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"

  redis:
    image: redis:6.2
    container_name: redis
    restart: unless-stopped
    mem_limit: "1g"
    cpus: "1.5"
    environment:
      TZ: Asia/Seoul
    volumes:
      - ./configuration/local/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    mem_limit: "1g"
    cpus: "1.5"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_PROMETHEUS_EXPORTER: true

  localstack:
    image: localstack/localstack
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEBUG=1
      - AWS_DEFAULT_REGION=us-northeast-1
      - DATA_DIR=/var/lib/localstack/data
    volumes:
      - ./localstack-data:/var/lib/localstack
      - ./configuration/local/bootstrap.sh:/etc/localstack/init/ready.d/bootstrap.sh

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configuration/local/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin


  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka
    ports:
      - "9092:9092"
    mem_limit: "1g"
    cpus: "1.5"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092, EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafka-connect:
    image: debezium/connect:2.0.1.Final
    container_name: debezium-connect
    ports:
      - "8083:8083"
    mem_limit: "1g"
    cpus: "1.5"
    environment:
      BOOTSTRAP_SERVERS: "kafka:29092"
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      PLUGIN_PATH: /kafka/connect
    depends_on:
      - kafka
      - database

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9091:8080"
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - kafka-connect
      - kafka

volumes:
  redis_data: